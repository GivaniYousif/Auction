/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Bid;

import java.awt.event.KeyEvent;

/**
 *
 * @author john.gerstenberg
 */
public class AuctionForm extends javax.swing.JFrame {

    // class level stack
    // LinkedListStack theStack = new LinkedListStack();
    // JavaBuiltInStack theStack = new JavaBuiltInStack();
    // JavaArrayListStack theStack = new JavaArrayListStack();
    AuctionLinkListStack theStack = new AuctionLinkListStack();
    
    /**
     * Creates new form StackForm
     */
    public AuctionForm() {
        initComponents();
    }

    
    int HighBid = 0;
    int BidCount = 0;
    
   
    
    
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtItemName = new javax.swing.JTextField();
        btnItemAndBid = new javax.swing.JButton();
        btnShowBids = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        lstBidsOutput = new java.awt.List();
        txtMinBid = new javax.swing.JTextField();
        txtBidder = new javax.swing.JTextField();
        txtBid = new javax.swing.JTextField();
        txtMaxBid = new javax.swing.JTextField();
        txtBidCount = new javax.swing.JLabel();
        txtHighestAmount = new javax.swing.JLabel();
        txtIssue = new javax.swing.JLabel();
        txtHighestBidder = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txtItemName.setBorder(javax.swing.BorderFactory.createTitledBorder("Item Name"));
        txtItemName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtItemNameActionPerformed(evt);
            }
        });

        btnItemAndBid.setText("Add item and bid");
        btnItemAndBid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnItemAndBidActionPerformed(evt);
            }
        });

        btnShowBids.setText("Show All Bids");
        btnShowBids.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowBidsActionPerformed(evt);
            }
        });

        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        lstBidsOutput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lstBidsOutputActionPerformed(evt);
            }
        });

        txtMinBid.setBorder(javax.swing.BorderFactory.createTitledBorder("Min. Bid"));
        txtMinBid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMinBidActionPerformed(evt);
            }
        });
        txtMinBid.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtMinBidKeyPressed(evt);
            }
        });

        txtBidder.setBorder(javax.swing.BorderFactory.createTitledBorder("Bidder"));
        txtBidder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBidderActionPerformed(evt);
            }
        });

        txtBid.setBorder(javax.swing.BorderFactory.createTitledBorder("Bid Amount"));
        txtBid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBidActionPerformed(evt);
            }
        });

        txtMaxBid.setBorder(javax.swing.BorderFactory.createTitledBorder("Max. Bid"));
        txtMaxBid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMaxBidActionPerformed(evt);
            }
        });

        txtBidCount.setBorder(javax.swing.BorderFactory.createTitledBorder("# of Bids"));

        txtHighestAmount.setBorder(javax.swing.BorderFactory.createTitledBorder("Highest Bid Amount"));

        txtIssue.setBorder(javax.swing.BorderFactory.createTitledBorder("Issue:"));

        txtHighestBidder.setBorder(javax.swing.BorderFactory.createTitledBorder("Highest Bidder"));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lstBidsOutput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtIssue, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(21, 21, 21))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 23, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txtItemName, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txtBidder, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtBid, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(btnShowBids, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(btnItemAndBid))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txtMinBid, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtMaxBid)))))
                        .addGap(161, 161, 161)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtHighestBidder, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtBidCount, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtHighestAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(92, 92, 92))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtItemName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtBidder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtBid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtMaxBid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtMinBid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtHighestAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtHighestBidder, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtBidCount, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(btnItemAndBid)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnShowBids)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                .addComponent(lstBidsOutput, javax.swing.GroupLayout.PREFERRED_SIZE, 317, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtIssue, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addComponent(btnExit)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_btnExitActionPerformed
        
    
    private void btnItemAndBidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnItemAndBidActionPerformed
        
       String bidder = txtBidder.getText();
       int BidAmount = Integer.parseInt(txtBid.getText());
       int MaxBid =  Integer.parseInt(txtMaxBid.getText());
       int MinBid = Integer.parseInt(txtMinBid.getText());
       
       
       if (BidAmount < MinBid){
           txtIssue.setText("Bid Amount must be more than $" + MinBid + ".");    
       }
      
      if (BidAmount > HighBid){
           txtHighestAmount.setText(String.valueOf(BidAmount));
           txtHighestBidder.setText(bidder);
           HighBid = BidAmount; 
       }  
        String input = " Item: " + txtItemName.getText() +  ", Bidder's name: " + bidder + ", Bid Amount " + BidAmount;
     
      
         if (BidAmount > MinBid  && BidAmount < MaxBid){
        theStack.push(input); 
        BidCount++;
        
        txtBidCount.setText(String.valueOf(BidCount));
         }
         
         
    }//GEN-LAST:event_btnItemAndBidActionPerformed

    private void btnShowBidsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowBidsActionPerformed
        // TODO: pop each item off the stack and display it
        String output;
        int i;
        int size = theStack.size();
        
        lstBidsOutput.removeAll();
        
        for (i = 0; i < size; i++) {
            output = (String)theStack.pop();
            lstBidsOutput.add(output);
            
        } 
    }//GEN-LAST:event_btnShowBidsActionPerformed

    private void txtItemNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtItemNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtItemNameActionPerformed

    private void txtMinBidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMinBidActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMinBidActionPerformed

    private void txtBidderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBidderActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBidderActionPerformed

    private void txtBidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBidActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBidActionPerformed

    private void txtMaxBidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMaxBidActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMaxBidActionPerformed

    private void txtMinBidKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMinBidKeyPressed
               
    }//GEN-LAST:event_txtMinBidKeyPressed

    private void lstBidsOutputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lstBidsOutputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_lstBidsOutputActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AuctionForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AuctionForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AuctionForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AuctionForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AuctionForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnItemAndBid;
    private javax.swing.JButton btnShowBids;
    private java.awt.List lstBidsOutput;
    private javax.swing.JTextField txtBid;
    private javax.swing.JLabel txtBidCount;
    private javax.swing.JTextField txtBidder;
    private javax.swing.JLabel txtHighestAmount;
    private javax.swing.JLabel txtHighestBidder;
    private javax.swing.JLabel txtIssue;
    private javax.swing.JTextField txtItemName;
    private javax.swing.JTextField txtMaxBid;
    private javax.swing.JTextField txtMinBid;
    // End of variables declaration//GEN-END:variables
}
